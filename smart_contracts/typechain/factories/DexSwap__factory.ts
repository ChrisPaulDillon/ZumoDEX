/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DexSwap, DexSwapInterface } from "../DexSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestTokenDex",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "TokensSold",
    type: "event",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBuyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaximumBuy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaximumSell",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSellRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSales",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sellTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract TestTokenDex",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526064600155603260025560006003553480156200002057600080fd5b5060405162000f8538038062000f8583398181016040528101906200004691906200014c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200017e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010082620000d3565b9050919050565b60006200011482620000f3565b9050919050565b620001268162000107565b81146200013257600080fd5b50565b60008151905062000146816200011b565b92915050565b600060208284031215620001655762000164620000ce565b5b6000620001758482850162000135565b91505092915050565b610df7806200018e6000396000f3fe60806040526004361061007f5760003560e01c80636c11bcd31161004e5780636c11bcd3146101375780638d8f594814610160578063d0febe4c1461018b578063fc0c546a1461019557610086565b80631db92d521461008b5780632156a96c146100b6578063226fd9eb146100e15780633d35d7ba1461010c57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a06101c0565b6040516100ad9190610820565b60405180910390f35b3480156100c257600080fd5b506100cb6101c8565b6040516100d89190610820565b60405180910390f35b3480156100ed57600080fd5b506100f66101d2565b6040516101039190610820565b60405180910390f35b34801561011857600080fd5b506101216101dc565b60405161012e9190610820565b60405180910390f35b34801561014357600080fd5b5061015e6004803603810190610159919061086c565b6101e6565b005b34801561016c57600080fd5b50610175610495565b6040516101829190610820565b60405180910390f35b610193610546565b005b3480156101a157600080fd5b506101aa6107e3565b6040516101b79190610918565b60405180910390f35b600047905090565b6000600354905090565b6000600254905090565b6000600154905090565b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102409190610954565b60206040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102909190610984565b10156102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610a34565b60405180910390fd5b6000600154826102e19190610a83565b905080471015610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d90610b4f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161038393929190610b6f565b602060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190610bde565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561041c573d6000803e3d6000fd5b507f697c42d55a5e1fed3f464ec6f38b32546a0bd368dc8068b065c67566d73f32903360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846001546040516104749493929190610c0b565b60405180910390a1600160035461048b9190610c50565b6003819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104f19190610954565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610984565b905090565b6000600154346105569190610cd5565b90508060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b29190610954565b60206040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190610984565b1015610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90610d78565b60405180910390fd5b60006002346106529190610cd5565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106bc573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610718929190610d98565b602060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190610bde565b50600160035461077a9190610c50565b6003819055507f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846001546040516107d79493929190610c0b565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b61081a81610807565b82525050565b60006020820190506108356000830184610811565b92915050565b600080fd5b61084981610807565b811461085457600080fd5b50565b60008135905061086681610840565b92915050565b6000602082840312156108825761088161083b565b5b600061089084828501610857565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108de6108d96108d484610899565b6108b9565b610899565b9050919050565b60006108f0826108c3565b9050919050565b6000610902826108e5565b9050919050565b610912816108f7565b82525050565b600060208201905061092d6000830184610909565b92915050565b600061093e82610899565b9050919050565b61094e81610933565b82525050565b60006020820190506109696000830184610945565b92915050565b60008151905061097e81610840565b92915050565b60006020828403121561099a5761099961083b565b5b60006109a88482850161096f565b91505092915050565b600082825260208201905092915050565b7f4572726f723a20596f7520646f206e6f7420686176652074686973206d616e7960008201527f20746f6b656e7321000000000000000000000000000000000000000000000000602082015250565b6000610a1e6028836109b1565b9150610a29826109c2565b604082019050919050565b60006020820190508181036000830152610a4d81610a11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a8e82610807565b9150610a9983610807565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad257610ad1610a54565b5b828202905092915050565b7f4572726f723a204e6f7420656e6f75676820457468657220696e20636f6e747260008201527f6163740000000000000000000000000000000000000000000000000000000000602082015250565b6000610b396023836109b1565b9150610b4482610add565b604082019050919050565b60006020820190508181036000830152610b6881610b2c565b9050919050565b6000606082019050610b846000830186610945565b610b916020830185610945565b610b9e6040830184610811565b949350505050565b60008115159050919050565b610bbb81610ba6565b8114610bc657600080fd5b50565b600081519050610bd881610bb2565b92915050565b600060208284031215610bf457610bf361083b565b5b6000610c0284828501610bc9565b91505092915050565b6000608082019050610c206000830187610945565b610c2d6020830186610945565b610c3a6040830185610811565b610c476060830184610811565b95945050505050565b6000610c5b82610807565b9150610c6683610807565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9b57610c9a610a54565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ce082610807565b9150610ceb83610807565b925082610cfb57610cfa610ca6565b5b828204905092915050565b7f4572726f723a2052657175657374656420416d6f756e7420457863656564732060008201527f436f6e747261637420546f6b656e20416d6f756e740000000000000000000000602082015250565b6000610d626035836109b1565b9150610d6d82610d06565b604082019050919050565b60006020820190508181036000830152610d9181610d55565b9050919050565b6000604082019050610dad6000830185610945565b610dba6020830184610811565b939250505056fea2646970667358221220cfc9181c6390fb0470607b64d3f5efc6ba1e544de8df1ce4a64b6cb45301ed4864736f6c63430008080033";

export class DexSwap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DexSwap> {
    return super.deploy(_token, overrides || {}) as Promise<DexSwap>;
  }
  getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  attach(address: string): DexSwap {
    return super.attach(address) as DexSwap;
  }
  connect(signer: Signer): DexSwap__factory {
    return super.connect(signer) as DexSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexSwapInterface {
    return new utils.Interface(_abi) as DexSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexSwap {
    return new Contract(address, _abi, signerOrProvider) as DexSwap;
  }
}
