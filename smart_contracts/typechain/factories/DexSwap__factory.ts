/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DexSwap, DexSwapInterface } from "../DexSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestTokenDex",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "TokensSold",
    type: "event",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBuyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaximumBuy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaximumSell",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSellRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSales",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sellTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract TestTokenDex",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526064600155603260025560006003553480156200002057600080fd5b50604051620011413803806200114183398181016040528101906200004691906200014c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200017e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010082620000d3565b9050919050565b60006200011482620000f3565b9050919050565b620001268162000107565b81146200013257600080fd5b50565b60008151905062000146816200011b565b92915050565b600060208284031215620001655762000164620000ce565b5b6000620001758482850162000135565b91505092915050565b610fb3806200018e6000396000f3fe60806040526004361061007f5760003560e01c80636c11bcd31161004e5780636c11bcd3146101375780638d8f594814610160578063d0febe4c1461018b578063fc0c546a1461019557610086565b80631db92d521461008b5780632156a96c146100b6578063226fd9eb146100e15780633d35d7ba1461010c57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a06101c0565b6040516100ad9190610924565b60405180910390f35b3480156100c257600080fd5b506100cb6101c8565b6040516100d89190610924565b60405180910390f35b3480156100ed57600080fd5b506100f66101d2565b6040516101039190610924565b60405180910390f35b34801561011857600080fd5b506101216101dc565b60405161012e9190610924565b60405180910390f35b34801561014357600080fd5b5061015e60048036038101906101599190610970565b6101e6565b005b34801561016c57600080fd5b50610175610495565b6040516101829190610924565b60405180910390f35b610193610546565b005b3480156101a157600080fd5b506101aa610822565b6040516101b79190610a1c565b60405180910390f35b600047905090565b6000600354905090565b6000600254905090565b6000600154905090565b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102409190610a58565b60206040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102909190610a88565b10156102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610b38565b60405180910390fd5b6000600154826102e19190610b87565b905080471015610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d90610c53565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161038393929190610c73565b602060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190610ce2565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561041c573d6000803e3d6000fd5b507f697c42d55a5e1fed3f464ec6f38b32546a0bd368dc8068b065c67566d73f32903360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846001546040516104749493929190610d0f565b60405180910390a1600160035461048b9190610d54565b6003819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104f19190610a58565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610a88565b905090565b6000600154346105569190610dd9565b90506105976040518060400160405280600d81526020017f546f6b656e20416d6f756e74200000000000000000000000000000000000000081525082610846565b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f19190610a58565b60206040518083038186803b15801561060957600080fd5b505afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610a88565b1015610682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990610e7c565b60405180910390fd5b60006002346106919190610dd9565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106fb573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610757929190610e9c565b602060405180830381600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610ce2565b5060016003546107b99190610d54565b6003819055507f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846001546040516108169493929190610d0f565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108de828260405160240161085c929190610f4d565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108e2565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000819050919050565b61091e8161090b565b82525050565b60006020820190506109396000830184610915565b92915050565b600080fd5b61094d8161090b565b811461095857600080fd5b50565b60008135905061096a81610944565b92915050565b6000602082840312156109865761098561093f565b5b60006109948482850161095b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109e26109dd6109d88461099d565b6109bd565b61099d565b9050919050565b60006109f4826109c7565b9050919050565b6000610a06826109e9565b9050919050565b610a16816109fb565b82525050565b6000602082019050610a316000830184610a0d565b92915050565b6000610a428261099d565b9050919050565b610a5281610a37565b82525050565b6000602082019050610a6d6000830184610a49565b92915050565b600081519050610a8281610944565b92915050565b600060208284031215610a9e57610a9d61093f565b5b6000610aac84828501610a73565b91505092915050565b600082825260208201905092915050565b7f4572726f723a20596f7520646f206e6f7420686176652074686973206d616e7960008201527f20746f6b656e7321000000000000000000000000000000000000000000000000602082015250565b6000610b22602883610ab5565b9150610b2d82610ac6565b604082019050919050565b60006020820190508181036000830152610b5181610b15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b928261090b565b9150610b9d8361090b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd657610bd5610b58565b5b828202905092915050565b7f4572726f723a204e6f7420656e6f75676820457468657220696e20636f6e747260008201527f6163740000000000000000000000000000000000000000000000000000000000602082015250565b6000610c3d602383610ab5565b9150610c4882610be1565b604082019050919050565b60006020820190508181036000830152610c6c81610c30565b9050919050565b6000606082019050610c886000830186610a49565b610c956020830185610a49565b610ca26040830184610915565b949350505050565b60008115159050919050565b610cbf81610caa565b8114610cca57600080fd5b50565b600081519050610cdc81610cb6565b92915050565b600060208284031215610cf857610cf761093f565b5b6000610d0684828501610ccd565b91505092915050565b6000608082019050610d246000830187610a49565b610d316020830186610a49565b610d3e6040830185610915565b610d4b6060830184610915565b95945050505050565b6000610d5f8261090b565b9150610d6a8361090b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9f57610d9e610b58565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de48261090b565b9150610def8361090b565b925082610dff57610dfe610daa565b5b828204905092915050565b7f4572726f723a2052657175657374656420416d6f756e7420457863656564732060008201527f436f6e747261637420546f6b656e20416d6f756e740000000000000000000000602082015250565b6000610e66603583610ab5565b9150610e7182610e0a565b604082019050919050565b60006020820190508181036000830152610e9581610e59565b9050919050565b6000604082019050610eb16000830185610a49565b610ebe6020830184610915565b9392505050565b600081519050919050565b60005b83811015610eee578082015181840152602081019050610ed3565b83811115610efd576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f1f82610ec5565b610f298185610ab5565b9350610f39818560208601610ed0565b610f4281610f03565b840191505092915050565b60006040820190508181036000830152610f678185610f14565b9050610f766020830184610915565b939250505056fea26469706673582212205a415b907f2c56711051b58face00a614983039f00843144c12d37a4f3776f3764736f6c63430008080033";

export class DexSwap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DexSwap> {
    return super.deploy(_token, overrides || {}) as Promise<DexSwap>;
  }
  getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  attach(address: string): DexSwap {
    return super.attach(address) as DexSwap;
  }
  connect(signer: Signer): DexSwap__factory {
    return super.connect(signer) as DexSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexSwapInterface {
    return new utils.Interface(_abi) as DexSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexSwap {
    return new Contract(address, _abi, signerOrProvider) as DexSwap;
  }
}
